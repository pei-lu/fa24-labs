/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_Counter_Nbit
#(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg [(Bits-1):0] count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule


module FrenchRepublicanCalendar (
  input CLK,
  input CLR,
  input SETUP,
  input MIN_ADV,
  input HR_ADV,
  input Day_ADV,
  input WEEK_ADV,
  input Month_ADV,
  output [6:0] SECONDS,
  output [6:0] MINUTES,
  output [3:0] HOURS,
  output [3:0] DAYS,
  output [1:0] WEEKS,
  output [3:0] MONTHS,
  output [3:0] YEARS
);
  wire s0;
  wire s1;
  wire [6:0] SECONDS_temp;
  wire s2;
  wire s3;
  wire s4;
  wire [6:0] MINUTES_temp;
  wire s5;
  wire s6;
  wire s7;
  wire [3:0] HOURS_temp;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire [3:0] DAYS_temp;
  wire s12;
  wire s13;
  wire s14;
  wire [1:0] WEEKS_temp;
  wire s15;
  wire s16;
  wire s17;
  wire [3:0] MONTHS_temp;
  wire s18;
  wire s19;
  wire s20;
  wire [3:0] YEARS_temp;
  assign s9 = (~ SETUP & CLK);
  assign s0 = (s9 | CLR);
  // SECONDS_COUNTER
  DIG_Counter_Nbit #(
    .Bits(7)
  )
  DIG_Counter_Nbit_i0 (
    .en( 1'b1 ),
    .C( s0 ),
    .clr( s1 ),
    .out( SECONDS_temp )
  );
  assign s1 = (CLR | s2);
  assign s4 = (CLR | s5);
  assign s7 = (CLR | s8);
  assign s3 = ((MIN_ADV & SETUP) | (~ s9 & s2) | CLR);
  assign s6 = ((HR_ADV & SETUP) | (~ s3 & s5) | CLR);
  assign s11 = (CLR | s12);
  assign s10 = ((Day_ADV & SETUP) | (~ s6 & s8) | CLR);
  assign s14 = (CLR | s15);
  assign s13 = ((WEEK_ADV & SETUP) | (~ s10 & s12) | CLR);
  assign s17 = (CLR | s18);
  assign s16 = ((Month_ADV & SETUP) | (~ s13 & s15) | CLR);
  assign s19 = ((~ s16 & s18) | CLR);
  assign s20 = (CLR | (YEARS_temp[0] & YEARS_temp[1] & ~ YEARS_temp[2] & YEARS_temp[3]));
  assign s2 = (SECONDS_temp[0] & SECONDS_temp[1] & ~ SECONDS_temp[2] & ~ SECONDS_temp[3] & ~ SECONDS_temp[4] & SECONDS_temp[5] & SECONDS_temp[6]);
  // MINUTES_COUNTER
  DIG_Counter_Nbit #(
    .Bits(7)
  )
  DIG_Counter_Nbit_i1 (
    .en( 1'b1 ),
    .C( s3 ),
    .clr( s4 ),
    .out( MINUTES_temp )
  );
  // HOURS_COUNTER
  DIG_Counter_Nbit #(
    .Bits(4)
  )
  DIG_Counter_Nbit_i2 (
    .en( 1'b1 ),
    .C( s6 ),
    .clr( s7 ),
    .out( HOURS_temp )
  );
  // DAYS_COUNTER
  DIG_Counter_Nbit #(
    .Bits(4)
  )
  DIG_Counter_Nbit_i3 (
    .en( 1'b1 ),
    .C( s10 ),
    .clr( s11 ),
    .out( DAYS_temp )
  );
  // WEEKS_COUNTER
  DIG_Counter_Nbit #(
    .Bits(2)
  )
  DIG_Counter_Nbit_i4 (
    .en( 1'b1 ),
    .C( s13 ),
    .clr( s14 ),
    .out( WEEKS_temp )
  );
  // MONTHS_COUNTER
  DIG_Counter_Nbit #(
    .Bits(4)
  )
  DIG_Counter_Nbit_i5 (
    .en( 1'b1 ),
    .C( s16 ),
    .clr( s17 ),
    .out( MONTHS_temp )
  );
  // HOURSYEAR
  DIG_Counter_Nbit #(
    .Bits(4)
  )
  DIG_Counter_Nbit_i6 (
    .en( 1'b1 ),
    .C( s19 ),
    .clr( s20 ),
    .out( YEARS_temp )
  );
  assign s8 = (HOURS_temp[0] & ~ HOURS_temp[1] & ~ HOURS_temp[2] & HOURS_temp[3]);
  assign s5 = (MINUTES_temp[0] & MINUTES_temp[1] & ~ MINUTES_temp[2] & ~ MINUTES_temp[3] & ~ MINUTES_temp[4] & MINUTES_temp[5] & MINUTES_temp[6]);
  assign s12 = (DAYS_temp[0] & ~ DAYS_temp[1] & ~ DAYS_temp[2] & DAYS_temp[3]);
  assign s15 = (~ WEEKS_temp[0] & WEEKS_temp[1]);
  assign s18 = (MONTHS_temp[0] & MONTHS_temp[1] & ~ MONTHS_temp[2] & MONTHS_temp[3]);
  assign SECONDS = SECONDS_temp;
  assign MINUTES = MINUTES_temp;
  assign HOURS = HOURS_temp;
  assign DAYS = DAYS_temp;
  assign WEEKS = WEEKS_temp;
  assign MONTHS = MONTHS_temp;
  assign YEARS = YEARS_temp;
endmodule

module FrenchRepublicanCalendarAlarm (
  input CLR,
  input SETUP,
  input MIN_ADV,
  input HR_ADV,
  input DAY_ADV,
  input WEEK_ADV,
  input MONTH_ADV,
  output [6:0] MINUTES,
  output [3:0] HOURS,
  output [3:0] DAYS,
  output [1:0] WEEKS,
  output [3:0] MONTHS
);
  wire s0;
  wire s1;
  wire [6:0] MINUTES_temp;
  wire s2;
  wire s3;
  wire [3:0] HOURS_temp;
  wire s4;
  wire s5;
  wire [3:0] DAYS_temp;
  wire s6;
  wire s7;
  wire [1:0] WEEKS_temp;
  wire s8;
  wire s9;
  wire [3:0] MONTHS_temp;
  assign s0 = ((MIN_ADV & SETUP) | CLR);
  assign s2 = ((HR_ADV & SETUP) | CLR);
  assign s4 = ((DAY_ADV & SETUP) | CLR);
  assign s6 = ((WEEK_ADV & SETUP) | CLR);
  assign s8 = ((MONTH_ADV & SETUP) | CLR);
  // MINUTES_COUNTER
  DIG_Counter_Nbit #(
    .Bits(7)
  )
  DIG_Counter_Nbit_i0 (
    .en( 1'b1 ),
    .C( s0 ),
    .clr( s1 ),
    .out( MINUTES_temp )
  );
  assign s1 = (CLR | (MINUTES_temp[0] & MINUTES_temp[1] & ~ MINUTES_temp[2] & ~ MINUTES_temp[3] & ~ MINUTES_temp[4] & MINUTES_temp[5] & MINUTES_temp[6]));
  // HOURS_COUNTER
  DIG_Counter_Nbit #(
    .Bits(4)
  )
  DIG_Counter_Nbit_i1 (
    .en( 1'b1 ),
    .C( s2 ),
    .clr( s3 ),
    .out( HOURS_temp )
  );
  assign s3 = (CLR | (HOURS_temp[0] & ~ HOURS_temp[1] & ~ HOURS_temp[2] & HOURS_temp[3]));
  // DAYS_COUNTER
  DIG_Counter_Nbit #(
    .Bits(4)
  )
  DIG_Counter_Nbit_i2 (
    .en( 1'b1 ),
    .C( s4 ),
    .clr( s5 ),
    .out( DAYS_temp )
  );
  assign s5 = (CLR | (DAYS_temp[0] & ~ DAYS_temp[1] & ~ DAYS_temp[2] & DAYS_temp[3]));
  // WEEKS_COUNTER
  DIG_Counter_Nbit #(
    .Bits(2)
  )
  DIG_Counter_Nbit_i3 (
    .en( 1'b1 ),
    .C( s6 ),
    .clr( s7 ),
    .out( WEEKS_temp )
  );
  assign s7 = (CLR | (~ WEEKS_temp[0] & WEEKS_temp[1]));
  // MONTHS_COUNTER
  DIG_Counter_Nbit #(
    .Bits(4)
  )
  DIG_Counter_Nbit_i4 (
    .en( 1'b1 ),
    .C( s8 ),
    .clr( s9 ),
    .out( MONTHS_temp )
  );
  assign s9 = (CLR | (MONTHS_temp[0] & ~ MONTHS_temp[1] & ~ MONTHS_temp[2] & MONTHS_temp[3]));
  assign MINUTES = MINUTES_temp;
  assign HOURS = HOURS_temp;
  assign DAYS = DAYS_temp;
  assign WEEKS = WEEKS_temp;
  assign MONTHS = MONTHS_temp;
endmodule
module LUT_SEG_DECODER (
    input \0 ,
    input \1 ,
    input \2 ,
    input \3 ,
    input \4 ,
    input \5 ,
    input \6 ,
    output reg  [13:0]  out
);
    reg [13:0] my_lut [0:127];
    wire [6:0] temp;
    assign temp = {\6 , \5 , \4 , \3 , \2 , \1 , \0 };

    always @ (*) begin
       out = my_lut[temp];
    end

    initial begin
        my_lut[0] = 14'h1fbf;
        my_lut[1] = 14'h1f86;
        my_lut[2] = 14'h1fdb;
        my_lut[3] = 14'h1fcf;
        my_lut[4] = 14'h1fe6;
        my_lut[5] = 14'h1fed;
        my_lut[6] = 14'h1ffd;
        my_lut[7] = 14'h1f87;
        my_lut[8] = 14'h1fff;
        my_lut[9] = 14'h1fe7;
        my_lut[10] = 14'h33f;
        my_lut[11] = 14'h306;
        my_lut[12] = 14'h35b;
        my_lut[13] = 14'h34f;
        my_lut[14] = 14'h366;
        my_lut[15] = 14'h36d;
        my_lut[16] = 14'h37d;
        my_lut[17] = 14'h307;
        my_lut[18] = 14'h37f;
        my_lut[19] = 14'h367;
        my_lut[20] = 14'h2dbf;
        my_lut[21] = 14'h2d86;
        my_lut[22] = 14'h2ddb;
        my_lut[23] = 14'h2dcf;
        my_lut[24] = 14'h2de6;
        my_lut[25] = 14'h2ded;
        my_lut[26] = 14'h2dfd;
        my_lut[27] = 14'h2d87;
        my_lut[28] = 14'h2dff;
        my_lut[29] = 14'h2de7;
        my_lut[30] = 14'h27bf;
        my_lut[31] = 14'h2786;
        my_lut[32] = 14'h27db;
        my_lut[33] = 14'h27cf;
        my_lut[34] = 14'h27e6;
        my_lut[35] = 14'h27ed;
        my_lut[36] = 14'h27fd;
        my_lut[37] = 14'h2787;
        my_lut[38] = 14'h27ff;
        my_lut[39] = 14'h27e7;
        my_lut[40] = 14'h333f;
        my_lut[41] = 14'h3306;
        my_lut[42] = 14'h335b;
        my_lut[43] = 14'h334f;
        my_lut[44] = 14'h3366;
        my_lut[45] = 14'h336d;
        my_lut[46] = 14'h337d;
        my_lut[47] = 14'h3307;
        my_lut[48] = 14'h337f;
        my_lut[49] = 14'h3367;
        my_lut[50] = 14'h36bf;
        my_lut[51] = 14'h3686;
        my_lut[52] = 14'h36db;
        my_lut[53] = 14'h36cf;
        my_lut[54] = 14'h36e6;
        my_lut[55] = 14'h36ed;
        my_lut[56] = 14'h36fd;
        my_lut[57] = 14'h3687;
        my_lut[58] = 14'h36ff;
        my_lut[59] = 14'h36e7;
        my_lut[60] = 14'h3ebf;
        my_lut[61] = 14'h3e86;
        my_lut[62] = 14'h3edb;
        my_lut[63] = 14'h3ecf;
        my_lut[64] = 14'h3ee6;
        my_lut[65] = 14'h3eed;
        my_lut[66] = 14'h3efd;
        my_lut[67] = 14'h3e87;
        my_lut[68] = 14'h3eff;
        my_lut[69] = 14'h3ee7;
        my_lut[70] = 14'h3bf;
        my_lut[71] = 14'h386;
        my_lut[72] = 14'h3db;
        my_lut[73] = 14'h3cf;
        my_lut[74] = 14'h3e6;
        my_lut[75] = 14'h3ed;
        my_lut[76] = 14'h3fd;
        my_lut[77] = 14'h387;
        my_lut[78] = 14'h3ff;
        my_lut[79] = 14'h3e7;
        my_lut[80] = 14'h3fbf;
        my_lut[81] = 14'h3f86;
        my_lut[82] = 14'h3fdb;
        my_lut[83] = 14'h3fcf;
        my_lut[84] = 14'h3fe6;
        my_lut[85] = 14'h3fed;
        my_lut[86] = 14'h3ffd;
        my_lut[87] = 14'h3f87;
        my_lut[88] = 14'h3fff;
        my_lut[89] = 14'h3fe7;
        my_lut[90] = 14'h33bf;
        my_lut[91] = 14'h3386;
        my_lut[92] = 14'h33db;
        my_lut[93] = 14'h33cf;
        my_lut[94] = 14'h33e6;
        my_lut[95] = 14'h33ed;
        my_lut[96] = 14'h33fd;
        my_lut[97] = 14'h3387;
        my_lut[98] = 14'h33ff;
        my_lut[99] = 14'h33e7;
        my_lut[100] = 14'h0;
        my_lut[101] = 14'h0;
        my_lut[102] = 14'h0;
        my_lut[103] = 14'h0;
        my_lut[104] = 14'h0;
        my_lut[105] = 14'h0;
        my_lut[106] = 14'h0;
        my_lut[107] = 14'h0;
        my_lut[108] = 14'h0;
        my_lut[109] = 14'h0;
        my_lut[110] = 14'h0;
        my_lut[111] = 14'h0;
        my_lut[112] = 14'h0;
        my_lut[113] = 14'h0;
        my_lut[114] = 14'h0;
        my_lut[115] = 14'h0;
        my_lut[116] = 14'h0;
        my_lut[117] = 14'h0;
        my_lut[118] = 14'h0;
        my_lut[119] = 14'h0;
        my_lut[120] = 14'h0;
        my_lut[121] = 14'h0;
        my_lut[122] = 14'h0;
        my_lut[123] = 14'h0;
        my_lut[124] = 14'h0;
        my_lut[125] = 14'h0;
        my_lut[126] = 14'h0;
        my_lut[127] = 14'h0;
    end
endmodule


module SevenSegmentDecoder (
  input [6:0] DATA_IN,
  output [13:0] DATA_OUT
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  assign s0 = DATA_IN[0];
  assign s1 = DATA_IN[1];
  assign s2 = DATA_IN[2];
  assign s3 = DATA_IN[3];
  assign s4 = DATA_IN[4];
  assign s5 = DATA_IN[5];
  assign s6 = DATA_IN[6];
  // SEG_DECODER
  LUT_SEG_DECODER LUT_SEG_DECODER_i0 (
    .\0 ( s0 ),
    .\1 ( s1 ),
    .\2 ( s2 ),
    .\3 ( s3 ),
    .\4 ( s4 ),
    .\5 ( s5 ),
    .\6 ( s6 ),
    .out( DATA_OUT )
  );
endmodule

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module FrenchRepublicanCalendarAlarmClock (
  input CLK,
  input CLR,
  input SETUP_TIME,
  input MIN_ADV,
  input HR_ADV,
  input SETUP_ALARM,
  input ALARM_EN,
  input [13:0] PlaceHolder_14,
  input [2:0] PlaceHolder_2,
  input [2:0] PlaceHolder_15,
  input DAY_ADV,
  input WEEK_ADV,
  input MONTH_ADV,
  input [2:0] PlaceHolder_16,
  input [4:0] PlaceHolder_17,
  input [2:0] PlaceHolder_18,
  input [2:0] PlaceHolder_19,
  input [2:0] PlaceHolder_20,
  input [4:0] PlaceHolder_21,
  input [2:0] PlaceHolder_22,
  input [13:0] PlaceHolder_23,
  output [6:0] SECOND,
  output [6:0] MINUTES,
  output [3:0] HOURS,
  output [6:0] ALARM_MINUTES,
  output [3:0] ALARM_HOURS,
  output [13:0] SEG_SECONDS,
  output [13:0] SEG_MINUTES,
  output [13:0] SEG_HOURS,
  output BUZZ,
  output [3:0] DAYS,
  output [1:0] WEEKS,
  output [3:0] MONTHS,
  output [3:0] YEARS,
  output [13:0] SEG_DAYS,
  output [13:0] SEG_WEEKS,
  output [13:0] SEG_MONTHS,
  output [13:0] SEG_YEARS,
  output [3:0] ALARM_DAYS,
  output [1:0] ALARM_WEEKS,
  output [3:0] ALARM_MONTHS
);
  wire [6:0] SECOND_temp;
  wire [6:0] MINUTES_temp;
  wire [3:0] HOURS_temp;
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire [6:0] ALARM_MINUTES_temp;
  wire [3:0] ALARM_HOURS_temp;
  wire s4;
  wire s5;
  wire s6;
  wire [13:0] s7;
  wire [13:0] s8;
  wire [6:0] s9;
  wire [13:0] s10;
  wire [13:0] s11;
  wire [6:0] s12;
  wire [13:0] s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire [3:0] DAYS_temp;
  wire [1:0] WEEKS_temp;
  wire [3:0] MONTHS_temp;
  wire [3:0] YEARS_temp;
  wire s23;
  wire s24;
  wire s25;
  wire [6:0] s26;
  wire [13:0] s27;
  wire [6:0] s28;
  wire [13:0] s29;
  wire [6:0] s30;
  wire [13:0] s31;
  wire [6:0] s32;
  wire [13:0] s33;
  wire [13:0] s34;
  wire [13:0] s35;
  wire [13:0] s36;
  wire [3:0] ALARM_DAYS_temp;
  wire [1:0] ALARM_WEEKS_temp;
  wire [3:0] ALARM_MONTHS_temp;
  wire [6:0] s37;
  wire [6:0] s38;
  wire [6:0] s39;
  assign s3 = (CLK & ~ CLR);
  assign s4 = (~ SETUP_TIME & SETUP_ALARM);
  assign s0 = (~ SETUP_ALARM & SETUP_TIME);
  assign s1 = (s0 & MIN_ADV);
  assign s2 = (s0 & HR_ADV);
  assign s5 = (MIN_ADV & s4);
  assign s6 = (HR_ADV & s4);
  assign s20 = (s0 & DAY_ADV);
  assign s21 = (s0 & WEEK_ADV);
  assign s22 = (s0 & MONTH_ADV);
  assign s23 = (DAY_ADV & s4);
  assign s24 = (WEEK_ADV & s4);
  assign s25 = (MONTH_ADV & s4);
  FrenchRepublicanCalendar FrenchRepublicanCalendar_i0 (
    .CLK( s3 ),
    .CLR( CLR ),
    .SETUP( s0 ),
    .MIN_ADV( s1 ),
    .HR_ADV( s2 ),
    .Day_ADV( s20 ),
    .WEEK_ADV( s21 ),
    .Month_ADV( s22 ),
    .SECONDS( SECOND_temp ),
    .MINUTES( MINUTES_temp ),
    .HOURS( HOURS_temp ),
    .DAYS( DAYS_temp ),
    .WEEKS( WEEKS_temp ),
    .MONTHS( MONTHS_temp ),
    .YEARS( YEARS_temp )
  );
  FrenchRepublicanCalendarAlarm FrenchRepublicanCalendarAlarm_i1 (
    .CLR( CLR ),
    .SETUP( s4 ),
    .MIN_ADV( s5 ),
    .HR_ADV( s6 ),
    .DAY_ADV( s23 ),
    .WEEK_ADV( s24 ),
    .MONTH_ADV( s25 ),
    .MINUTES( ALARM_MINUTES_temp ),
    .HOURS( ALARM_HOURS_temp ),
    .DAYS( ALARM_DAYS_temp ),
    .WEEKS( ALARM_WEEKS_temp ),
    .MONTHS( ALARM_MONTHS_temp )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i2 (
    .DATA_IN( SECOND_temp ),
    .DATA_OUT( s7 )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i3 (
    .DATA_IN( MINUTES_temp ),
    .DATA_OUT( s8 )
  );
  assign s9[0] = HOURS_temp[0];
  assign s9[1] = HOURS_temp[1];
  assign s9[2] = HOURS_temp[2];
  assign s9[3] = HOURS_temp[3];
  assign s9[6:4] = PlaceHolder_2;
  SevenSegmentDecoder SevenSegmentDecoder_i4 (
    .DATA_IN( ALARM_MINUTES_temp ),
    .DATA_OUT( s11 )
  );
  assign s12[0] = ALARM_HOURS_temp[0];
  assign s12[1] = ALARM_HOURS_temp[1];
  assign s12[2] = ALARM_HOURS_temp[2];
  assign s12[3] = ALARM_HOURS_temp[3];
  assign s12[6:4] = PlaceHolder_15;
  assign s26[0] = DAYS_temp[0];
  assign s26[1] = DAYS_temp[1];
  assign s26[2] = DAYS_temp[2];
  assign s26[3] = DAYS_temp[3];
  assign s26[6:4] = PlaceHolder_16;
  assign s28[0] = WEEKS_temp[0];
  assign s28[1] = WEEKS_temp[1];
  assign s28[6:2] = PlaceHolder_17;
  assign s30[0] = MONTHS_temp[0];
  assign s30[1] = MONTHS_temp[1];
  assign s30[2] = MONTHS_temp[2];
  assign s30[3] = MONTHS_temp[3];
  assign s30[6:4] = PlaceHolder_18;
  assign s32[0] = YEARS_temp[0];
  assign s32[1] = YEARS_temp[1];
  assign s32[2] = YEARS_temp[2];
  assign s32[3] = YEARS_temp[3];
  assign s32[6:4] = PlaceHolder_19;
  assign s37[0] = ALARM_DAYS_temp[0];
  assign s37[1] = ALARM_DAYS_temp[1];
  assign s37[2] = ALARM_DAYS_temp[2];
  assign s37[3] = ALARM_DAYS_temp[3];
  assign s37[6:4] = PlaceHolder_20;
  assign s38[0] = ALARM_WEEKS_temp[0];
  assign s38[1] = ALARM_WEEKS_temp[1];
  assign s38[6:2] = PlaceHolder_21;
  assign s39[0] = ALARM_MONTHS_temp[0];
  assign s39[1] = ALARM_MONTHS_temp[1];
  assign s39[2] = ALARM_MONTHS_temp[2];
  assign s39[3] = ALARM_MONTHS_temp[3];
  assign s39[6:4] = PlaceHolder_22;
  SevenSegmentDecoder SevenSegmentDecoder_i5 (
    .DATA_IN( s9 ),
    .DATA_OUT( s10 )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i6 (
    .DATA_IN( s12 ),
    .DATA_OUT( s13 )
  );
  Mux_2x1_NBits #(
    .Bits(14)
  )
  Mux_2x1_NBits_i7 (
    .sel( SETUP_ALARM ),
    .in_0( s7 ),
    .in_1( PlaceHolder_14 ),
    .out( SEG_SECONDS )
  );
  Mux_2x1_NBits #(
    .Bits(14)
  )
  Mux_2x1_NBits_i8 (
    .sel( SETUP_ALARM ),
    .in_0( s8 ),
    .in_1( s11 ),
    .out( SEG_MINUTES )
  );
  CompUnsigned #(
    .Bits(14)
  )
  CompUnsigned_i9 (
    .a( s8 ),
    .b( s11 ),
    .\= ( s14 )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i10 (
    .DATA_IN( s26 ),
    .DATA_OUT( s27 )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i11 (
    .DATA_IN( s28 ),
    .DATA_OUT( s29 )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i12 (
    .DATA_IN( s30 ),
    .DATA_OUT( s31 )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i13 (
    .DATA_IN( s32 ),
    .DATA_OUT( s33 )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i14 (
    .DATA_IN( s37 ),
    .DATA_OUT( s34 )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i15 (
    .DATA_IN( s38 ),
    .DATA_OUT( s35 )
  );
  SevenSegmentDecoder SevenSegmentDecoder_i16 (
    .DATA_IN( s39 ),
    .DATA_OUT( s36 )
  );
  Mux_2x1_NBits #(
    .Bits(14)
  )
  Mux_2x1_NBits_i17 (
    .sel( SETUP_ALARM ),
    .in_0( s10 ),
    .in_1( s13 ),
    .out( SEG_HOURS )
  );
  CompUnsigned #(
    .Bits(14)
  )
  CompUnsigned_i18 (
    .a( s10 ),
    .b( s13 ),
    .\= ( s15 )
  );
  Mux_2x1_NBits #(
    .Bits(14)
  )
  Mux_2x1_NBits_i19 (
    .sel( SETUP_ALARM ),
    .in_0( s27 ),
    .in_1( s34 ),
    .out( SEG_DAYS )
  );
  CompUnsigned #(
    .Bits(14)
  )
  CompUnsigned_i20 (
    .a( s27 ),
    .b( s34 ),
    .\= ( s16 )
  );
  Mux_2x1_NBits #(
    .Bits(14)
  )
  Mux_2x1_NBits_i21 (
    .sel( SETUP_ALARM ),
    .in_0( s29 ),
    .in_1( s35 ),
    .out( SEG_WEEKS )
  );
  CompUnsigned #(
    .Bits(14)
  )
  CompUnsigned_i22 (
    .a( s29 ),
    .b( s35 ),
    .\= ( s17 )
  );
  Mux_2x1_NBits #(
    .Bits(14)
  )
  Mux_2x1_NBits_i23 (
    .sel( SETUP_ALARM ),
    .in_0( s31 ),
    .in_1( s36 ),
    .out( SEG_MONTHS )
  );
  CompUnsigned #(
    .Bits(14)
  )
  CompUnsigned_i24 (
    .a( s31 ),
    .b( s36 ),
    .\= ( s18 )
  );
  Mux_2x1_NBits #(
    .Bits(14)
  )
  Mux_2x1_NBits_i25 (
    .sel( SETUP_ALARM ),
    .in_0( s33 ),
    .in_1( PlaceHolder_23 ),
    .out( SEG_YEARS )
  );
  CompUnsigned #(
    .Bits(14)
  )
  CompUnsigned_i26 (
    .a( s33 ),
    .b( PlaceHolder_23 ),
    .\= ( s19 )
  );
  assign BUZZ = ((s14 & s15 & s16 & s17 & s18 & s19) & ~ ALARM_EN);
  assign SECOND = SECOND_temp;
  assign MINUTES = MINUTES_temp;
  assign HOURS = HOURS_temp;
  assign ALARM_MINUTES = ALARM_MINUTES_temp;
  assign ALARM_HOURS = ALARM_HOURS_temp;
  assign DAYS = DAYS_temp;
  assign WEEKS = WEEKS_temp;
  assign MONTHS = MONTHS_temp;
  assign YEARS = YEARS_temp;
  assign ALARM_DAYS = ALARM_DAYS_temp;
  assign ALARM_WEEKS = ALARM_WEEKS_temp;
  assign ALARM_MONTHS = ALARM_MONTHS_temp;
endmodule
